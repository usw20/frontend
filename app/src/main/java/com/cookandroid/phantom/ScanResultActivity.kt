package com.cookandroid.phantom

import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.os.Build
import android.os.Bundle
import android.widget.Button
import android.widget.ImageButton
import android.widget.TextView
import androidx.activity.OnBackPressedCallback
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.cookandroid.phantom.model.ScanResult

class ScanResultActivity : AppCompatActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var tvScanSummary: TextView
    private lateinit var tvDangerousCount: TextView
    private lateinit var btnResolve: Button
    private lateinit var btnBack: ImageButton

    // Í≤∞Í≥º Î¶¨Ïä§Ìä∏Îäî Í∞±Ïã† Í∞ÄÎä•ÌïòÍ≤å varÎ°ú
    private var finalResults: List<ScanResult> = emptyList()
    private lateinit var scanAdapter: ScanResultAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scan_result)

        // Î∑∞ Ï¥àÍ∏∞Ìôî
        tvScanSummary = findViewById(R.id.tvScanSummary)
        tvDangerousCount = findViewById(R.id.tvDangerousCount)
        recyclerView = findViewById(R.id.rvScanResults)
        btnResolve = findViewById(R.id.btnResolveAction)
        btnBack = findViewById(R.id.btnBack)  // activity_scan_result.xml Ïùò ÏÉÅÎã® Î∞îÏóê Ï°¥Ïû¨Ìï¥Ïïº Ìï®

        // Îí§Î°úÍ∞ÄÍ∏∞(ÏÉÅÎã® Î≤ÑÌäº)
        btnBack.setOnClickListener { navigateBackToAppScan() }

        // Îí§Î°úÍ∞ÄÍ∏∞(Î¨ºÎ¶¨/Ï†úÏä§Ï≤ò)
        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() = navigateBackToAppScan()
        })

        // Intent ÏàòÏã†
        val initialTotalScanned = intent.getIntExtra("TOTAL_SCANNED", 0)
        finalResults = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            intent.getParcelableArrayListExtra("SCAN_RESULTS_LIST", ScanResult::class.java) ?: emptyList()
        } else {
            @Suppress("DEPRECATION")
            intent.getParcelableArrayListExtra("SCAN_RESULTS_LIST") ?: emptyList()
        }

        // Ï¥àÍ∏∞ UI/Î¶¨Ïä§Ìä∏ ÏÑ∏ÌåÖ
        val initialDangerousApps = finalResults.count { it.isMalicious }
        val initialErrorCount = calculateErrorCount(finalResults)
        updateSummary(initialTotalScanned, initialDangerousApps, initialErrorCount)
        setupRecyclerView(finalResults)

        // Ìï¥Í≤∞ Î≤ÑÌäº
        btnResolve.setOnClickListener {
            val currentDangerousApps = finalResults.filter { it.isMalicious }
            if (currentDangerousApps.isNotEmpty()) {
                val firstDangerousApp = currentDangerousApps.first()
                val detailIntent = Intent(this, AppDetailActivity::class.java).apply {
                    putExtra("SCAN_RESULT_DETAIL", firstDangerousApp)
                }
                startActivity(detailIntent)
            } else {
                // ÏúÑÌóò Ïï±Ïù¥ ÏóÜÏúºÎ©¥ AppScanActivityÎ°ú Î≥µÍ∑Ä
                navigateBackToAppScan()
            }
        }
    }

    override fun onResume() {
        super.onResume()
        refreshResults()
    }

    /** AppScanActivityÎ°ú Î≥µÍ∑Ä */
    private fun navigateBackToAppScan() {
        val intent = Intent(this, AppScanActivity::class.java).apply {
            // Ïù¥ÎØ∏ Ïä§ÌÉùÏóê ÏûàÏúºÎ©¥ Í∑∏ ÏúÑÎ•º Ï†ïÎ¶¨ÌïòÍ≥† Ìï¥Îãπ Ïï°Ìã∞ÎπÑÌã∞Î°ú Î≥µÍ∑Ä
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        startActivity(intent)
        finish()
    }

    /** ÏÇ≠Ï†úÎêú Ïï± Ï†úÍ±∞ ÌõÑ UI Í∞±Ïã† */
    private fun refreshResults() {
        val pm = packageManager
        val updatedResults = finalResults.filter { result ->
            try {
                pm.getPackageInfo(result.appInfo.packageName, 0)
                true
            } catch (e: PackageManager.NameNotFoundException) {
                false
            }
        }
        if (updatedResults.size != finalResults.size) {
            finalResults = updatedResults
            val totalScanned = finalResults.size
            val dangerousApps = finalResults.count { it.isMalicious }
            val errorCount = calculateErrorCount(finalResults)
            updateSummary(totalScanned, dangerousApps, errorCount)
            scanAdapter.updateData(finalResults)
        }
    }

    private fun calculateErrorCount(results: List<ScanResult>): Int =
        results.count {
            it.threatType.contains("Error") ||
                    it.threatType.contains("Timeout") ||
                    it.threatType.contains("Unknown Host") ||
                    it.threatType.contains("Connection Error")
        }

    /** ÏÉÅÎã® ÏöîÏïΩ Í∞±Ïã† */
    private fun updateSummary(total: Int, dangerous: Int, errors: Int) {
        tvScanSummary.text = "Ï¥ù ${total}Í∞ú Ïï± Í≤ÄÏÇ¨ ÏôÑÎ£å"

        val (message, color, buttonText, buttonColor) = when {
            dangerous > 0 -> {
                Pair("{$dangerous}Í∞ú Ïï±ÏóêÏÑú ÏúÑÌóò ÏöîÏÜåÍ∞Ä Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§.", Color.RED) to
                        Pair("ÏúÑÌóò Ïï± ÌôïÏù∏ Î∞è Ìï¥Í≤∞", Color.parseColor("#FF4081"))
            }
            errors > 0 -> {
                Pair("${errors}Í∞ú Ïï± Í≤ÄÏÇ¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Color.parseColor("#FFA500")) to
                        Pair("ÏùºÎ∂Ä Ïï± Ïû¨Í≤ÄÏÇ¨ ÏãúÎèÑ", Color.parseColor("#660099"))
            }
            else -> {
                Pair("Î™®Îì† Ïï±Ïù¥ ÏïàÏ†ÑÌï©ÎãàÎã§. üëç", Color.parseColor("#00AA00")) to
                        Pair("ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞", Color.parseColor("#660099"))
            }
        }.let { (mc, bc) -> Quad(mc.first, mc.second, bc.first, bc.second) }

        tvDangerousCount.text = message
        tvDangerousCount.setTextColor(color)
        btnResolve.text = buttonText
        btnResolve.setBackgroundColor(buttonColor)
    }

    /** RecyclerView Ïó∞Í≤∞ */
    private fun setupRecyclerView(results: List<ScanResult>) {
        recyclerView.layoutManager = LinearLayoutManager(this)
        scanAdapter = ScanResultAdapter(results) { selectedResult ->
            val detailIntent = Intent(this, AppDetailActivity::class.java).apply {
                putExtra("SCAN_RESULT_DETAIL", selectedResult)
            }
            startActivity(detailIntent)
        }
        recyclerView.adapter = scanAdapter
    }

    /** Í∞ÑÎã®Ìïú Îç∞Ïù¥ÌÑ∞ ÌôÄÎçî */
    private data class Quad<A, B, C, D>(val first: A, val second: B, val third: C, val fourth: D)
}
